import { GoogleGenAI, GenerateContentResponse, Type } from "@google/genai";
import type { Question } from "../types";

// The API key is provided by a script in `index.html` for this standalone app version.
const apiKey = (window as any).process?.env?.API_KEY;

if (!apiKey) {
  const errorMsg =
    "Gemini API key is missing. Please ensure it is set correctly in index.html.";
  console.error(errorMsg);
  // This error will stop the application from running and should be handled in the UI
  // for a better user experience, for instance, by showing a message on the screen.
  throw new Error(errorMsg);
}

const ai = new GoogleGenAI({ apiKey });

const questionSchema = {
  type: Type.OBJECT,
  properties: {
    question: {
      type: Type.STRING,
      description: "The scenario question for the user.",
    },
    choices: {
      type: Type.ARRAY,
      description:
        "An array of 2 to 3 possible actions for the user to choose from.",
      items: { type: Type.STRING },
    },
    correctChoiceIndex: {
      type: Type.INTEGER,
      description:
        "The 0-based index of the correct choice in the 'choices' array. This choice must be the objectively safest and best practice.",
    },
    feedback: {
      type: Type.ARRAY,
      description:
        "An array of feedback strings, one for each choice, in the same order. Explain why each choice is good or bad in a supportive, educational tone.",
      items: { type: Type.STRING },
    },
  },
  required: ["question", "choices", "correctChoiceIndex", "feedback"],
};

const generateQuestion = async (
  categoryTitle: string,
  systemInstruction: string,
  context?: string,
): Promise<Question> => {
  try {
    const prompt = context
      ? `The scenario is '${categoryTitle}'. Here is what just happened: ${context}. Now, create the next logical question and choices in this scenario.`
      : `Create the first challenging scenario question for: '${categoryTitle}'.`;

    const response: GenerateContentResponse = await ai.models.generateContent({
      model: "gemini-2.5-flash",
      contents: prompt,
      config: {
        systemInstruction: systemInstruction,
        responseMimeType: "application/json",
        responseSchema: questionSchema,
      },
    });

    let text = response.text.trim();
    if (text.startsWith("```json")) {
      text = text.substring(7, text.length - 3).trim();
    }

    const questionData = JSON.parse(text);

    if (
      !questionData.question ||
      !questionData.choices ||
      questionData.choices.length < 2 ||
      questionData.feedback.length !== questionData.choices.length
    ) {
      throw new Error("Received invalid question data structure from AI.");
    }

    return questionData as Question;
  } catch (error) {
    console.error("Error generating question:", error);
    if (error instanceof SyntaxError) {
      throw new Error(
        "Failed to parse the AI's response. The data was not valid JSON.",
      );
    }
    throw new Error("Failed to generate scenario question.");
  }
};

export const generateInitialScenario = async (
  categoryTitle: string,
  systemInstruction: string,
): Promise<Question> => {
  try {
    return await generateQuestion(categoryTitle, systemInstruction);
  } catch (error) {
    console.error("Error in generateInitialScenario:", error);
    throw error;
  }
};

export const generateNextQuestion = async (
  categoryTitle: string,
  systemInstruction: string,
  context: string,
): Promise<Question> => {
  return generateQuestion(categoryTitle, systemInstruction, context);
};

export const generateGameSummary = async (
  summaryPrompt: string,
): Promise<string> => {
  try {
    const response = await ai.models.generateContent({
      model: "gemini-2.5-flash",
      contents: summaryPrompt,
    });
    return response.text;
  } catch (error) {
    console.error("Error generating game summary:", error);
    throw new Error("Failed to generate performance summary.");
  }
};

export const generateScenarioImage = async (
  prompt: string,
): Promise<string> => {
  try {
    const response = await ai.models.generateImages({
      model: "imagen-3.0-generate-002",
      prompt: prompt,
      config: {
        numberOfImages: 1,
        outputMimeType: "image/jpeg",
        aspectRatio: "16:9",
      },
    });

    if (
      !response ||
      !response.generatedImages ||
      response.generatedImages.length === 0
    ) {
      throw new Error("No images were generated by the API.");
    }

    const image = response.generatedImages[0];
    if (!image?.image?.imageBytes) {
      throw new Error(
        "No image was generated by the API or the response is invalid.",
      );
    }

    const base64ImageBytes: string = image.image.imageBytes;
    return `data:image/jpeg;base64,${base64ImageBytes}`;
  } catch (error) {
    console.error("Error generating scenario image:", error);
    // If it's a response stream error, provide a more specific error message
    if (
      error instanceof TypeError &&
      error.message.includes("body stream already read")
    ) {
      throw new Error(
        "Image generation failed due to API response error. Please try again.",
      );
    }
    throw new Error("Failed to generate scenario image.");
  }
};
